services:
  redis:
    image: redis:8.0-alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:17.5-alpine
    restart: always
    env_file:
      - backend/.env
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-postgres}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - backend/.env
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn app.server.main:create_app --host 0.0.0.0 --port 8000 --reload --factory
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8000/api/v1/healthcheck || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5

  bot:
    build:
      context: ./backend
      dockerfile: DockerfileBot
    env_file:
      - backend/.bot.env
    depends_on:
      backend:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    volumes:
      - ./backend/bot/logs:/app/logs


  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    env_file:
      - frontend/.env
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
    command: >
      sh -c "npm install && npm run build && npm run start"

    depends_on:
      backend:
        condition: service_healthy

  nginx:
    image: nginx:1.29.0
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./backend/static:/app/static
      - ./backend/media:/app/media
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - /etc/letsencrypt/live/english.shaxzodbek.com/fullchain.pem:/etc/letsencrypt/live/english.shaxzodbek.com/fullchain.pem
      - /etc/letsencrypt/live/english.shaxzodbek.com/privkey.pem:/etc/letsencrypt/live/english.shaxzodbek.com/privkey.pem
    depends_on:
      backend:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
volumes:
  postgres_data:
  redis_data:
